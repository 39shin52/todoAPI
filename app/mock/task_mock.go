// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/repository/task_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/39shin52/todoAPI/app/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockTaskRepository) DeleteTask(arg0 context.Context, arg1 *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTask), arg0, arg1)
}

// InsertTask mocks base method.
func (m *MockTaskRepository) InsertTask(arg0 context.Context, arg1 *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTask indicates an expected call of InsertTask.
func (mr *MockTaskRepositoryMockRecorder) InsertTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockTaskRepository)(nil).InsertTask), arg0, arg1)
}

// SearchTaskByTaskID mocks base method.
func (m *MockTaskRepository) SearchTaskByTaskID(arg0 string) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTaskByTaskID", arg0)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTaskByTaskID indicates an expected call of SearchTaskByTaskID.
func (mr *MockTaskRepositoryMockRecorder) SearchTaskByTaskID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTaskByTaskID", reflect.TypeOf((*MockTaskRepository)(nil).SearchTaskByTaskID), arg0)
}

// SearchTaskByTitle mocks base method.
func (m *MockTaskRepository) SearchTaskByTitle(arg0 string) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTaskByTitle", arg0)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTaskByTitle indicates an expected call of SearchTaskByTitle.
func (mr *MockTaskRepositoryMockRecorder) SearchTaskByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTaskByTitle", reflect.TypeOf((*MockTaskRepository)(nil).SearchTaskByTitle), arg0)
}

// SelectTasks mocks base method.
func (m *MockTaskRepository) SelectTasks(arg0 string) ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTasks", arg0)
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTasks indicates an expected call of SelectTasks.
func (mr *MockTaskRepositoryMockRecorder) SelectTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTasks", reflect.TypeOf((*MockTaskRepository)(nil).SelectTasks), arg0)
}

// UpdateTask mocks base method.
func (m *MockTaskRepository) UpdateTask(arg0 context.Context, arg1 *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryMockRecorder) UpdateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTask), arg0, arg1)
}
